name: MusicApp CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: musicapp_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-flask
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Create .env file
      run: |
        echo "SECRET_KEY=test_secret_key" > .env
        echo "DB_USER=postgres" >> .env
        echo "DB_PASSWORD=postgres" >> .env
        echo "DB_HOST=localhost" >> .env
        echo "DB_PORT=5432" >> .env
        echo "DB_NAME=musicapp_test" >> .env
        echo "DATABASE_URI=postgresql://postgres:postgres@localhost:5432/musicapp_test" >> .env
        echo "SPOTIFY_CLIENT_ID=dummy_client_id" >> .env
        echo "SPOTIFY_CLIENT_SECRET=dummy_client_secret" >> .env
        echo "SPOTIFY_REDIRECT_URI=http://localhost:5000/callback" >> .env
    
    - name: Run tests
      run: |
        pytest -v
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  deploy:
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install gunicorn
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Deploy to Production
      run: |
        echo "Deployment would happen here"
        # Add your deployment commands here
        # Examples:
        # - Heroku: git push heroku main
        # - AWS Elastic Beanstalk: eb deploy
        # - Digital Ocean App Platform: doctl apps update 